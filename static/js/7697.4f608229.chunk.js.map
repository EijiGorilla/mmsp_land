{"version":3,"file":"static/js/7697.4f608229.chunk.js","mappings":"0QAoBA,IAAIA,EAyBJ,MAsFA,EAtFqBC,IAAgD,IAA/C,UAAEC,EAAS,SAAEC,EAAQ,YAAEC,GAAkBH,EAC7D,MAAOI,EAAWC,IAAgBC,EAAAA,EAAAA,UAA0B,IAqD5D,OAnDAC,EAAAA,EAAAA,YAAU,KAERF,EAAa,IACb,IAAIG,EAAQC,EAAAA,GAASC,cACrB,MAAMC,EAAS,oBACTC,EAAM,cAAgBX,EAAY,IAElCY,EAAcD,EAAM,SADR,WAAaV,EAAW,KAGpCY,EAAqBD,EAAc,SADpB,cAAgBV,EAAc,KAQjDK,EAAMO,MALHd,GAEMA,GAAcC,GAAaC,EAE3BF,GAAaC,IAAaC,EACrBQ,EAAS,QAAUE,EAEnBF,EAAS,QAAUG,EAJnBH,EAAS,QAAUC,EAFnBD,EAQhBH,EAAMQ,UAAY,CAAC,KAEnBR,EAAMS,gBAAiB,EACvBR,EAAAA,GAASS,cAAcV,GAAOW,MAAMC,IAElCA,EAAOC,SAASC,KAAI,CAACC,EAAcC,KACjC,MAAMC,EAAaF,EAAQE,WACrBC,EAAQD,EAAWE,GACnBC,EAAKH,EAAWI,QAChB3B,EAAWuB,EAAWK,KACtBC,EAAQN,EAAWO,MACnB7B,EAAcsB,EAAWQ,SACzBC,EAAWT,EAAWU,SACtBC,EAAKZ,EAEXnB,GAAcgC,GAAc,IACvBA,EACH,CACED,GAAIA,EACJV,MAAOA,EACPE,GAAIA,EACJ1B,SAAUA,EACV6B,MAAOA,EACP5B,YAAaA,EACb+B,SAAUA,KAEZ,GACF,GACF,GACD,CAACjC,EAAWC,EAAUC,KAGvBmC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAW,CAACL,GAAG,cAAcM,MAAM,iBAAgBF,SACjDpC,GACCA,EACGuC,QACC,CAACC,EAAUC,IACTA,IAAQzC,EAAU0C,WAAWC,GAAcA,EAAKb,WAAaU,EAAIV,aAEpEZ,KAAI,CAACF,EAAaI,KAGfc,EAAAA,EAAAA,KAACU,EAAAA,GAAe,CAEdN,MAAOtB,EAAOM,MACduB,YAAa7B,EAAOW,MACpBmB,MAAO9B,EAAOc,SACdiB,cAAUC,EACVC,wBAA0BC,GAhG5C,SAA4BA,GAC1B,IAAIC,EAAc,IAAIC,EAAAA,EAAM,CAC1BC,UAAW,CAACH,EAAMI,OAAOR,SAE3BzC,EAAAA,GAAS8C,YAAYA,GAAapC,MAAMC,IACtCA,EAAOuC,QACLC,EAAAA,GAAKC,KAAK,CACRH,OAAQtC,EAAOuC,OACfG,YAAa,EACbC,KAAM,IACN,IAGNH,EAAAA,GAAKI,cAAcvD,EAAAA,IAAUU,MAAM8C,IACjClE,GAAmBA,EAAgBmE,SACnCnE,EAAkBkE,EAAUE,UAAU,CAACb,EAAMI,OAAOR,QAEpDU,EAAAA,GAAKQ,GAAG,SAAS,KACfH,EAAUtB,OAAS,KACnB5C,EAAgBmE,QAAQ,GACxB,GAEN,CA0E2DG,CAAmBf,GAAOd,UAEnE8B,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACrB,MAAO9B,EAAOQ,GAAI4C,KAAK,cAAcC,MAAM,IAAIrC,GAAG,gBAAeI,SAAA,EAC5EF,EAAAA,EAAAA,KAACoC,EAAAA,GAAa,CAAC,YAAWtD,EAAOjB,YAAasE,MAAM,MACnDrD,EAAOQ,OATLR,EAAOgB,SAevB,C","sources":["components/LotIssueList.tsx"],"sourcesContent":["/* eslint-disable array-callback-return */\r\nimport { useEffect, useState } from 'react';\r\nimport { lotLayer } from '../layers';\r\nimport Query from '@arcgis/core/rest/support/Query';\r\nimport '@esri/calcite-components/dist/components/calcite-shell';\r\nimport '@esri/calcite-components/dist/components/calcite-list';\r\nimport '@esri/calcite-components/dist/components/calcite-list-item';\r\nimport '@esri/calcite-components/dist/components/calcite-shell-panel';\r\nimport '@esri/calcite-components/dist/components/calcite-action';\r\nimport '@esri/calcite-components/dist/components/calcite-action-bar';\r\nimport '@esri/calcite-components/dist/calcite/calcite.css';\r\nimport {\r\n  CalciteList,\r\n  CalciteListItem,\r\n  CalciteChip,\r\n  CalciteAvatar,\r\n} from '@esri/calcite-components-react';\r\nimport { view } from '../Scene';\r\n\r\n// Zoom in to selected lot from expropriation list\r\nlet highlightSelect: any;\r\nfunction resultClickHandler(event: any) {\r\n  var queryExtent = new Query({\r\n    objectIds: [event.target.value],\r\n  });\r\n  lotLayer.queryExtent(queryExtent).then((result: any) => {\r\n    result.extent &&\r\n      view.goTo({\r\n        target: result.extent,\r\n        speedFactor: 2,\r\n        zoom: 17,\r\n      });\r\n  });\r\n\r\n  view.whenLayerView(lotLayer).then((layerView: any) => {\r\n    highlightSelect && highlightSelect.remove();\r\n    highlightSelect = layerView.highlight([event.target.value]);\r\n\r\n    view.on('click', () => {\r\n      layerView.filter = null;\r\n      highlightSelect.remove();\r\n    });\r\n  });\r\n}\r\n\r\nconst LotIssueList = ({ contractp, landtype, landsection }: any) => {\r\n  const [exproItem, setExproItem] = useState<undefined | any>([]);\r\n\r\n  useEffect(() => {\r\n    // Reset the list\r\n    setExproItem([]);\r\n    var query = lotLayer.createQuery();\r\n    const qExpro = 'Issue IS NOT NULL';\r\n    const qCP = \"Package = '\" + contractp + \"'\";\r\n    const qLandType = \"Type = '\" + landtype + \"'\";\r\n    const qCpLandType = qCP + ' AND ' + qLandType;\r\n    const qLandSection = \"Station1 ='\" + landsection + \"'\";\r\n    const qCpLandTypeSection = qCpLandType + ' AND ' + qLandSection;\r\n\r\n    if (!contractp) {\r\n      query.where = qExpro;\r\n    } else if (contractp && !landtype && !landsection) {\r\n      query.where = qExpro + ' AND ' + qCP;\r\n    } else if (contractp && landtype && !landsection) {\r\n      query.where = qExpro + ' AND ' + qCpLandType;\r\n    } else {\r\n      query.where = qExpro + ' AND ' + qCpLandTypeSection;\r\n    }\r\n    query.outFields = ['*'];\r\n\r\n    query.returnGeometry = true;\r\n    lotLayer.queryFeatures(query).then((result: any) => {\r\n      // eslint-disable-next-line array-callback-return\r\n      result.features.map((feature: any, index: any) => {\r\n        const attributes = feature.attributes;\r\n        const lotid = attributes.Id;\r\n        const cp = attributes.Package;\r\n        const landtype = attributes.Type;\r\n        const issue = attributes.Issue;\r\n        const landsection = attributes.Station1;\r\n        const objectid = attributes.OBJECTID;\r\n        const id = index;\r\n\r\n        setExproItem((prev: any) => [\r\n          ...prev,\r\n          {\r\n            id: id,\r\n            lotid: lotid,\r\n            cp: cp,\r\n            landtype: landtype,\r\n            issue: issue,\r\n            landsection: landsection,\r\n            objectid: objectid,\r\n          },\r\n        ]);\r\n      });\r\n    });\r\n  }, [contractp, landtype, landsection]);\r\n\r\n  return (\r\n    <>\r\n      <CalciteList id=\"result-list\" label=\"exproListLabel\">\r\n        {exproItem && // Extract unique objects from the array\r\n          exproItem\r\n            .filter(\r\n              (ele: any, ind: any) =>\r\n                ind === exproItem.findIndex((elem: any) => elem.objectid === ele.objectid),\r\n            )\r\n            .map((result: any, index: any) => {\r\n              return (\r\n                // need 'key' to upper div and inside CalciteListItem\r\n                <CalciteListItem\r\n                  key={result.id}\r\n                  label={result.lotid}\r\n                  description={result.issue}\r\n                  value={result.objectid}\r\n                  selected={undefined}\r\n                  onCalciteListItemSelect={(event: any) => resultClickHandler(event)}\r\n                >\r\n                  <CalciteChip value={result.cp} slot=\"content-end\" scale=\"s\" id=\"exproListChip\">\r\n                    <CalciteAvatar full-name={result.landsection} scale=\"s\"></CalciteAvatar>\r\n                    {result.cp}\r\n                  </CalciteChip>\r\n                </CalciteListItem>\r\n              );\r\n            })}\r\n      </CalciteList>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LotIssueList;\r\n"],"names":["highlightSelect","_ref","contractp","landtype","landsection","exproItem","setExproItem","useState","useEffect","query","lotLayer","createQuery","qExpro","qCP","qCpLandType","qCpLandTypeSection","where","outFields","returnGeometry","queryFeatures","then","result","features","map","feature","index","attributes","lotid","Id","cp","Package","Type","issue","Issue","Station1","objectid","OBJECTID","id","prev","_jsx","_Fragment","children","CalciteList","label","filter","ele","ind","findIndex","elem","CalciteListItem","description","value","selected","undefined","onCalciteListItemSelect","event","queryExtent","Query","objectIds","target","extent","view","goTo","speedFactor","zoom","whenLayerView","layerView","remove","highlight","on","resultClickHandler","_jsxs","CalciteChip","slot","scale","CalciteAvatar"],"sourceRoot":""}